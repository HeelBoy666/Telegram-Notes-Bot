"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏
"""

import os
import json
import smtplib
import requests
from datetime import datetime
from typing import List, Dict, Any, Optional
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class NotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.config = self.load_config()
        self.notifications_queue = []
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        config_path = os.path.join(os.path.dirname(__file__), 'notification_config.json')
        
        default_config = {
            'email': {
                'enabled': False,
                'smtp_server': 'smtp.gmail.com',
                'smtp_port': 587,
                'username': '',
                'password': '',
                'from_email': '',
                'to_emails': []
            },
            'telegram': {
                'enabled': False,
                'bot_token': '',
                'chat_ids': []
            },
            'webhook': {
                'enabled': False,
                'url': '',
                'headers': {}
            },
            'notifications': {
                'critical_events': True,
                'admin_actions': True,
                'system_alerts': True,
                'user_activity': False
            }
        }
        
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                with open(config_path, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
                return default_config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return default_config
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = os.path.join(os.path.dirname(__file__), 'notification_config.json')
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def send_notification(self, title: str, message: str, notification_type: str = 'info', 
                         priority: str = 'normal', channels: List[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if channels is None:
            channels = ['email', 'telegram', 'webhook']
        
        success = True
        
        if 'email' in channels and self.config['email']['enabled']:
            if not self.send_email_notification(title, message, notification_type, priority):
                success = False
        
        if 'telegram' in channels and self.config['telegram']['enabled']:
            if not self.send_telegram_notification(title, message, notification_type, priority):
                success = False
        
        if 'webhook' in channels and self.config['webhook']['enabled']:
            if not self.send_webhook_notification(title, message, notification_type, priority):
                success = False
        
        self.notifications_queue.append({
            'title': title,
            'message': message,
            'type': notification_type,
            'priority': priority,
            'timestamp': datetime.now().isoformat(),
            'success': success
        })
        
        if len(self.notifications_queue) > 100:
            self.notifications_queue = self.notifications_queue[-50:]
        
        return success
    
    def send_email_notification(self, title: str, message: str, notification_type: str, priority: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            email_config = self.config['email']
            
            if not email_config['enabled'] or not email_config['to_emails']:
                return False
            
            msg = MIMEMultipart()
            msg['From'] = email_config['from_email']
            msg['To'] = ', '.join(email_config['to_emails'])
            msg['Subject'] = f"[{priority.upper()}] {title}"
            
            body = f"""
            <html>
            <body>
                <h2>{title}</h2>
                <p><strong>–¢–∏–ø:</strong> {notification_type}</p>
                <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> {priority}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <hr>
                <p>{message}</p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(email_config['smtp_server'], email_config['smtp_port']) as server:
                server.starttls()
                server.login(email_config['username'], email_config['password'])
                server.send_message(msg)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_telegram_notification(self, title: str, message: str, notification_type: str, priority: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            telegram_config = self.config['telegram']
            
            if not telegram_config['enabled'] or not telegram_config['chat_ids']:
                return False
            
            emoji_map = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'critical': 'üö®',
                'success': '‚úÖ'
            }
            
            emoji = emoji_map.get(notification_type, 'üì¢')
            priority_emoji = 'üî¥' if priority == 'high' else 'üü°' if priority == 'medium' else 'üü¢'
            
            text = f"""
{emoji} <b>{title}</b>

<b>–¢–∏–ø:</b> {notification_type}
<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_emoji} {priority}
<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{message}
            """.strip()
            
            for chat_id in telegram_config['chat_ids']:
                try:
                    url = f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage"
                    data = {
                        'chat_id': chat_id,
                        'text': text,
                        'parse_mode': 'HTML'
                    }
                    
                    response = requests.post(url, data=data, timeout=10)
                    if not response.ok:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–∞—Ç {chat_id}: {response.text}")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–∞—Ç {chat_id}: {e}")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_webhook_notification(self, title: str, message: str, notification_type: str, priority: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            webhook_config = self.config['webhook']
            
            if not webhook_config['enabled'] or not webhook_config['url']:
                return False
            
            payload = {
                'title': title,
                'message': message,
                'type': notification_type,
                'priority': priority,
                'timestamp': datetime.now().isoformat(),
                'source': 'web_admin_panel'
            }
            
            response = requests.post(
                webhook_config['url'],
                json=payload,
                headers=webhook_config.get('headers', {}),
                timeout=10
            )
            
            if not response.ok:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {response.status_code} - {response.text}")
                return False
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def notify_critical_event(self, event_type: str, description: str, user_id: Optional[int] = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–∏"""
        if not self.config['notifications']['critical_events']:
            return
        
        title = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}"
        message = f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        if user_id:
            message += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
        
        self.send_notification(title, message, 'critical', 'high')
    
    def notify_admin_action(self, action: str, description: str, admin_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.config['notifications']['admin_actions']:
            return
        
        title = f"–î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {action}"
        message = f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_id}"
        
        self.send_notification(title, message, 'info', 'medium')
    
    def notify_system_alert(self, alert_type: str, message: str, severity: str = 'warning'):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∞–ª–µ—Ä—Ç–µ"""
        if not self.config['notifications']['system_alerts']:
            return
        
        title = f"–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç: {alert_type}"
        priority = 'high' if severity in ['critical', 'error'] else 'medium'
        
        self.send_notification(title, message, severity, priority)
    
    def get_notifications_history(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.notifications_queue[-limit:] if self.notifications_queue else []
    
    def test_notification(self, channel: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        title = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        message = f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞–Ω–∞–ª–∞ {channel}"
        
        return self.send_notification(title, message, 'info', 'normal', [channel])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = NotificationSystem() 