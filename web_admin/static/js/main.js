// –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let refreshInterval;
let currentPage = 1;
let realtimeStatsInterval;

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π
let currentTheme = localStorage.getItem('theme') || 'light';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    initTheme();
    updateThemeIcon();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popover'–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    initUserPopovers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    initAutoRefresh();
    initRealtimeUpdates();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        document.body.classList.add('loaded');
    }, 100);
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(clearExpiredCache, 10 * 60 * 1000);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log('üöÄ –í–µ–±-–ø–∞–Ω–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã');
    console.log('üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ');
    console.log('‚ö° –ü–æ–ø–æ–≤–µ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤ Bootstrap
function initTooltips() {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function initModals() {
    const modalTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="modal"]'));
    modalTriggerList.map(function (modalTriggerEl) {
        return new bootstrap.Modal(modalTriggerEl);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popover'–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function initUserPopovers() {
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ popover'—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    const existingPopovers = document.querySelectorAll('[data-bs-toggle="popover"]');
    existingPopovers.forEach(el => {
        const popover = bootstrap.Popover.getInstance(el);
        if (popover) {
            popover.dispose();
        }
    });

    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö popover'–æ–≤
    const maxPopovers = 50;
    const limitedList = popoverTriggerList.slice(0, maxPopovers);
    
    limitedList.forEach(function (popoverTriggerEl) {
        try {
            const popover = new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'hover',
                html: true,
                placement: 'top',
                delay: { show: 300, hide: 100 } // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            popoverTriggerEl.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const userId = this.getAttribute('data-user-id');
                const username = this.getAttribute('data-username');
                
                if (userId && username) {
                    showUserDetails(userId, username);
                } else {
                    showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                }
            });
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ popover:', error);
        }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ popover'–æ–≤, —á–µ–º –ª–∏–º–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (popoverTriggerList.length > maxPopovers) {
        console.warn(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${limitedList.length} –∏–∑ ${popoverTriggerList.length} popover'–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function showUserDetails(userId, username) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('userDetailsModal');
    if (existingModal) {
        const existingBootstrapModal = bootstrap.Modal.getInstance(existingModal);
        if (existingBootstrapModal) {
            existingBootstrapModal.dispose();
        }
        existingModal.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const modalHtml = `
        <div class="modal fade" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="userDetailsModalLabel">
                            <i class="fas fa-user-circle me-2"></i>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4 text-center">
                                <div class="user-avatar-large mb-3">
                                    <i class="fas fa-user-circle fa-5x text-primary"></i>
                                </div>
                                <h5>${username}</h5>
                                <p class="text-muted">ID: ${userId}</p>
                            </div>
                            <div class="col-md-8">
                                <div id="userDetailsContent">
                                    <div class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                        </div>
                                        <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                        <button type="button" class="btn btn-primary" onclick="openSendMessageModal(${userId})">
                            <i class="fas fa-paper-plane me-1"></i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalElement = document.getElementById('userDetailsModal');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButtons = modalElement.querySelectorAll('[data-bs-dismiss="modal"]');
    closeButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalElement.addEventListener('hidden.bs.modal', function() {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        clearUserCache(userId);
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM
        setTimeout(() => {
            if (modalElement && modalElement.parentNode) {
                modalElement.remove();
            }
        }, 100);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(modalElement, {
        backdrop: 'static',
        keyboard: true
    });
    modal.show();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    loadUserDetails(userId);
}

// –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞
function clearExpiredCache() {
    const now = Date.now();
    for (const [key, value] of userCache.entries()) {
        if (now - value.timestamp > CACHE_DURATION) {
            userCache.delete(key);
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearUserCache(userId) {
    userCache.delete(userId);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
function clearAllUserCache() {
    userCache.clear();
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMetrics = {
    cacheHits: 0,
    cacheMisses: 0,
    averageLoadTime: 0,
    totalLoads: 0
};

function updatePerformanceMetrics(loadTime, isCacheHit = false) {
    if (isCacheHit) {
        performanceMetrics.cacheHits++;
    } else {
        performanceMetrics.cacheMisses++;
    }
    
    performanceMetrics.totalLoads++;
    performanceMetrics.averageLoadTime = 
        (performanceMetrics.averageLoadTime * (performanceMetrics.totalLoads - 1) + loadTime) / performanceMetrics.totalLoads;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –∑–∞–≥—Ä—É–∑–æ–∫
    if (performanceMetrics.totalLoads % 10 === 0) {
        console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`, {
            '–ö—ç—à-–ø–æ–ø–∞–¥–∞–Ω–∏—è': performanceMetrics.cacheHits,
            '–ö—ç—à-–ø—Ä–æ–º–∞—Ö–∏': performanceMetrics.cacheMisses,
            '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏': `${performanceMetrics.averageLoadTime.toFixed(2)}ms`,
            '–†–∞–∑–º–µ—Ä –∫—ç—à–∞': userCache.size
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function loadUserDetails(userId) {
    const startTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = userCache.get(userId);
    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
        displayUserDetails(cached.data);
        updatePerformanceMetrics(Date.now() - startTime, true);
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const contentDiv = document.getElementById('userDetailsContent');
    if (!contentDiv) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç userDetailsContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    contentDiv.innerHTML = `
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p class="mt-2 text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...</p>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const timeoutId = setTimeout(() => {
        if (contentDiv) {
            contentDiv.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-clock me-2"></i>
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å...
                </div>
            `;
        }
        updatePerformanceMetrics(Date.now() - startTime, false);
    }, 5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥

    fetch(`/api/users/${userId}`)
        .then(response => {
            clearTimeout(timeoutId);
            console.log(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, data);
            
            if (data.success && data.user) {
                const user = data.user;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                const isValidData = user.id && user.username && user.role !== undefined;
                if (!isValidData) {
                    console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
                    throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                userCache.set(userId, {
                    data: user,
                    timestamp: Date.now()
                });

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                displayUserDetails(user);
                updatePerformanceMetrics(Date.now() - startTime, false);
                
            } else {
                console.error('–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', data);
                if (contentDiv) {
                    contentDiv.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</strong><br>
                            ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}<br>
                            <small class="text-muted">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</small>
                        </div>
                    `;
                }
                updatePerformanceMetrics(Date.now() - startTime, false);
            }
        })
        .catch(error => {
            clearTimeout(timeoutId);
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId}:`, error);
            
            if (contentDiv) {
                contentDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-times-circle me-2"></i>
                        <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong><br>
                        ${error.message}<br>
                        <small class="text-muted">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</small>
                        <br><br>
                        <button class="btn btn-sm btn-outline-primary" onclick="loadUserDetails(${userId})">
                            <i class="fas fa-redo me-1"></i>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                        </button>
                    </div>
                `;
            }
            updatePerformanceMetrics(Date.now() - startTime, false);
        });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getRoleBadgeColor(role) {
    switch(role) {
        case 'main_admin': return 'danger';
        case 'admin': return 'warning';
        case 'user': return 'secondary';
        default: return 'secondary';
    }
}

function getRoleDisplayName(role) {
    switch(role) {
        case 'main_admin': return 'Boss';
        case 'admin': return 'Admin';
        case 'user': return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        default: return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
}

function getActivityColor(score) {
    if (score >= 80) return 'success';
    if (score >= 60) return 'info';
    if (score >= 40) return 'warning';
    return 'danger';
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function displayUserDetails(user) {
    const contentDiv = document.getElementById('userDetailsContent');
    
    const content = `
        <div class="user-stats">
            <div class="row">
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-calendar-alt text-info"></i>
                            <span>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</span>
                        </div>
                        <div class="stat-card-value">${formatDate(user.created_at)}</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-clock text-warning"></i>
                            <span>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
                        </div>
                        <div class="stat-card-value">${formatDate(user.last_activity)}</div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-star text-success"></i>
                            <span>–†–æ–ª—å</span>
                        </div>
                        <div class="stat-card-value">
                            <span class="badge bg-${getRoleBadgeColor(user.role)}">
                                ${getRoleDisplayName(user.role)}
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-users text-primary"></i>
                            <span>–†–µ—Ñ–µ—Ä–∞–ª—ã</span>
                        </div>
                        <div class="stat-card-value">${user.referral_count || 0}</div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-toggle-on text-${user.is_active ? 'success' : 'danger'}"></i>
                            <span>–°—Ç–∞—Ç—É—Å</span>
                        </div>
                        <div class="stat-card-value">
                            <span class="badge bg-${user.is_active ? 'success' : 'danger'}">
                                ${user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-chart-line text-info"></i>
                            <span>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
                        </div>
                        <div class="stat-card-value">
                            <div class="d-flex align-items-center">
                                <span class="me-2">${user.activity_score || 0}%</span>
                                <div class="progress flex-grow-1" style="height: 6px;">
                                    <div class="progress-bar bg-${getActivityColor(user.activity_score)}" 
                                         style="width: ${user.activity_score || 0}%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-sticky-note text-warning"></i>
                            <span>–ó–∞–º–µ—Ç–∫–∏</span>
                        </div>
                        <div class="stat-card-value">${user.notes_count || 0}</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card mb-3">
                        <div class="stat-card-header">
                            <i class="fas fa-user-plus text-info"></i>
                            <span>–†–µ—Ñ–µ—Ä–µ—Ä</span>
                        </div>
                        <div class="stat-card-value">
                            ${user.referrer_username ? `<span class="text-primary">${user.referrer_username}</span>` : '<span class="text-muted">–ù–µ—Ç</span>'}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    contentDiv.innerHTML = content;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        const cards = contentDiv.querySelectorAll('.stat-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'all 0.3s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }, 100);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
function initSearch() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', debounce(function() {
            performSearch(this.value);
        }, 300));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function initAutoRefresh() {
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ dashboard
    if (window.location.pathname === '/dashboard') {
        refreshInterval = setInterval(function() {
            updateDashboardStats();
        }, 30000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function initRealtimeUpdates() {
    // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ dashboard
    if (window.location.pathname === '/dashboard') {
        let updateCounter = 0;
        realtimeStatsInterval = setInterval(function() {
            updateRealtimeStats();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º popover'—ã —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 3 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (15 —Å–µ–∫—É–Ω–¥) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            updateCounter++;
            if (updateCounter % 3 === 0) {
                setTimeout(initUserPopovers, 1000);
            }
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
function initTheme() {
    document.documentElement.setAttribute('data-theme', currentTheme);
    document.body.classList.add('theme-transition');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    document.documentElement.setAttribute('data-theme', currentTheme);
    localStorage.setItem('theme', currentTheme);
    updateThemeIcon();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (typeof updateCharts === 'function') {
        updateCharts(currentPeriod);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ ${currentTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'} —Ç–µ–º—É`, 'info');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
function updateThemeIcon() {
    const themeIcon = document.getElementById('themeIcon');
    const themeToggle = document.getElementById('themeToggle');
    
    if (themeIcon && themeToggle) {
        if (currentTheme === 'dark') {
            themeIcon.className = 'fas fa-sun';
            themeToggle.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É';
        } else {
            themeIcon.className = 'fas fa-moon';
            themeToggle.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
function performSearch(query) {
    const currentUrl = new URL(window.location);
    currentUrl.searchParams.set('search', query);
    currentUrl.searchParams.set('page', '1');
    window.location.href = currentUrl.toString();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard
function updateDashboardStats() {
    fetch('/api/stats')
        .then(response => response.json())
        .then(data => {
            updateStatsCards(data);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateRealtimeStats() {
    fetch('/api/realtime/stats')
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('–û—à–∏–±–∫–∞ real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data.error);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            updateUserStats(data.users);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
            updateEventStats(data.events);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            updateReferralStats(data.referrals);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            updateBotInfo(data.bot);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
            updateLastUpdate(data.timestamp);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateUserStats(users) {
    const elements = {
        'total-users': users.total,
        'regular-users': users.regular,
        'admin-users': users.admin,
        'boss-users': users.boss
    };
    
    for (const [id, value] of Object.entries(elements)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || 0;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function updateEventStats(events) {
    const elements = {
        'total-events': events.total,
        'events-24h': events.last_24h
    };
    
    for (const [id, value] of Object.entries(elements)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || 0;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
function updateReferralStats(referrals) {
    const elements = {
        'total-referrals': referrals.total,
        'unique-referrers': referrals.unique_referrers
    };
    
    for (const [id, value] of Object.entries(elements)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || 0;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
function updateBotInfo(bot) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const statusElement = document.querySelector('.badge.bg-success, .badge.bg-danger');
    if (statusElement && bot.status) {
        const isOnline = bot.status === 'running';
        statusElement.className = `badge bg-${isOnline ? 'success' : 'danger'} fs-6`;
        statusElement.innerHTML = `<i class="fas fa-circle"></i> ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º uptime
    const uptimeElement = document.getElementById('bot-uptime');
    if (uptimeElement && bot.uptime) {
        uptimeElement.textContent = bot.uptime;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function updateLastUpdate(timestamp) {
    const lastUpdateElement = document.getElementById('last-update');
    if (lastUpdateElement && timestamp) {
        const date = new Date(timestamp);
        lastUpdateElement.textContent = date.toLocaleTimeString('ru-RU');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsCards(stats) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const cards = {
        'total-users': stats.total_users,
        'regular-users': stats.regular_users,
        'admin-users': stats.admin_users,
        'boss-users': stats.boss_users,
        'total-events': stats.total_events,
        'events-24h': stats.events_24h,
        'total-referrals': stats.total_referrals,
        'unique-referrers': stats.unique_referrers
    };
    
    for (const [id, value] of Object.entries(cards)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || 0;
        }
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
function controlBot(action) {
    const button = event.target;
    const originalText = button.innerHTML;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    button.innerHTML = '<span class="loading"></span> –ó–∞–≥—Ä—É–∑–∫–∞...';
    button.disabled = true;
    
    fetch('/api/bot/status', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({action: action})
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification(data.message || '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ ' + (action === 'start' ? '–∑–∞–ø—É—â–µ–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'), 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            updateBotStatus(data.status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                updateRealtimeStats();
            }, 2000);
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–æ–º', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–æ–º', 'error');
    })
    .finally(() => {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        button.innerHTML = originalText;
        button.disabled = false;
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
function updateBotStatus(status) {
    const statusElement = document.querySelector('.badge.bg-success, .badge.bg-danger');
    if (statusElement) {
        const isOnline = status === 'running';
        statusElement.className = `badge bg-${isOnline ? 'success' : 'danger'} fs-6`;
        statusElement.innerHTML = `<i class="fas fa-circle"></i> ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}`;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function sendMessageToUser(userId, message) {
    if (!userId || !message) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'warning');
        return;
    }
    
    fetch('/api/bot/send-message', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            user_id: parseInt(userId),
            message: message
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function openSendMessageModal(userId = null) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    const userDetailsModal = document.getElementById('userDetailsModal');
    if (userDetailsModal) {
        const modal = bootstrap.Modal.getInstance(userDetailsModal);
        if (modal) {
            modal.hide();
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (userId) {
        document.getElementById('messageUserId').value = userId;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageModal = new bootstrap.Modal(document.getElementById('sendMessageModal'));
    sendMessageModal.show();
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–µ–≥–æ ID –≤ –ø–æ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function setMyId() {
    fetch('/api/user/current')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('messageUserId').value = data.user_id;
                showNotification('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∞—à ID', 'success');
            } else {
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID', 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID', 'error');
        });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
function sendToAll() {
    document.getElementById('messageUserId').value = 'all';
    showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'info');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
function sendMessage() {
    const userId = document.getElementById('messageUserId').value;
    const message = document.getElementById('messageText').value;
    
    if (!message.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (userId === 'all') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        fetch('/api/bot/send-message-all', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'success');
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = bootstrap.Modal.getInstance(document.getElementById('sendMessageModal'));
                modal.hide();
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                document.getElementById('messageText').value = '';
                document.getElementById('messageUserId').value = '';
            } else {
                showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        });
    } else {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessageToUser(userId, message);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = bootstrap.Modal.getInstance(document.getElementById('sendMessageModal'));
        modal.hide();
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        document.getElementById('messageText').value = '';
        document.getElementById('messageUserId').value = '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData(type) {
    const button = event.target;
    const originalText = button.innerHTML;
    
    button.innerHTML = '<span class="loading"></span> –≠–∫—Å–ø–æ—Ä—Ç...';
    button.disabled = true;
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    setTimeout(() => {
        showNotification('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç', 'info');
        button.innerHTML = originalText;
        button.disabled = false;
    }, 2000);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
function filterTable(tableId, column, value) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    
    for (let row of rows) {
        const cell = row.getElementsByTagName('td')[column];
        if (cell) {
            const text = cell.textContent || cell.innerText;
            if (text.toLowerCase().includes(value.toLowerCase())) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    }
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü
function sortTable(tableId, column) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const tbody = table.getElementsByTagName('tbody')[0];
    const rows = Array.from(tbody.getElementsByTagName('tr'));
    
    rows.sort((a, b) => {
        const aText = a.getElementsByTagName('td')[column].textContent;
        const bText = b.getElementsByTagName('td')[column].textContent;
        return aText.localeCompare(bText);
    });
    
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    rows.forEach(row => tbody.appendChild(row));
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function addFadeInAnimation() {
    const elements = document.querySelectorAll('.card, .table');
    elements.forEach((element, index) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            element.style.transition = 'all 0.5s ease';
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }
    if (realtimeStatsInterval) {
        clearInterval(realtimeStatsInterval);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('JavaScript error:', e.error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error');
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∏—Å–ª–∞–º–∏
function formatNumber(num) {
    return new Intl.NumberFormat('ru-RU').format(num);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
function checkConnection() {
    if (!navigator.onLine) {
        showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'warning');
    }
}

window.addEventListener('online', function() {
    showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
});

window.addEventListener('offline', function() {
    showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'warning');
}); 