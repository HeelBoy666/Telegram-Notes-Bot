"""
Telegram-–±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
Copyright (c) 2025 HeelBoy666
Licensed under MIT License (see LICENSE file)

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
"""

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup
import html

from config import BOT_TOKEN, MAX_NOTES_PER_MESSAGE
from database import Database
from keyboards import (
    get_main_keyboard, get_admin_keyboard, get_admin_panel_keyboard, 
    get_admin_panel_inline_keyboard, get_role_management_keyboard, 
    get_users_list_keyboard, get_cancel_keyboard, get_admins_list_keyboard,
    get_referral_keyboard, get_referral_back_keyboard, get_debug_menu_keyboard, 
    get_debug_function_keyboard, get_debug_users_keyboard, get_debug_events_keyboard
)
from admin import AdminPanel

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class NoteStates(StatesGroup):
    waiting_for_note_text = State()
    waiting_for_delete_number = State()

class AdminPanelStates(StatesGroup):
    in_admin_panel = State()
    waiting_for_grant_user_id = State()
    waiting_for_revoke_user_id = State()

class ReferralStates(StatesGroup):
    in_referral_menu = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
db = Database()
admin_panel = AdminPanel()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_running = True
stop_event = None

def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global bot_running, stop_event
    bot_running = False
    if stop_event:
        stop_event.set()

def get_admin_panel_text(user_id: int) -> str:
    return (
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
    )

def update_user_username(user_id: int, username: str = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if username:
        db.save_username(user_id, username)

def get_user_display_name(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)"""
    username = db.get_username_by_id(user_id)
    if username and username != f"user{user_id}":
        return f"@{username}"
    else:
        return f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"

def get_user_display_name_html(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
    username = db.get_username_by_id(user_id)
    if username and username != f"user{user_id}":
        return f"@{username}"
    else:
        return f"<a href=\"tg://user?id={user_id}\">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"

def get_role_display_name(role: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
    role_mapping = {
        'user': 'user',
        'admin': 'Admin', 
        'main_admin': 'Boss'
    }
    return role_mapping.get(role, role)

async def check_bot_status(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    if not bot_running:
        await message.answer("‚ùå –ë–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode="HTML")
        return False
    return True

def get_user_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏"""
    if admin_panel.is_admin(user_id):
        return get_admin_keyboard()
    return get_main_keyboard()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        
        update_user_username(user_id, username)
        
        start_param = message.text.split()[1] if len(message.text.split()) > 1 else None
        
        if start_param and start_param.startswith('ref'):
            try:
                referrer_id = int(start_param[3:])
                if referrer_id != user_id:
                    db.add_referral(referrer_id, user_id)
                    db._update_referral_stats(referrer_id)
                    
                    referrer_username = db.get_username_by_id(referrer_id)
                    referrer_display = f"@{referrer_username}" if referrer_username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referrer_id}"
                    
                    welcome_text = (
                        f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <b>{referrer_display}</b>\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
                        f"üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                        f"‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                        f"‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
                        f"‚Ä¢ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                        f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
                    )
                else:
                    welcome_text = (
                        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                        "‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                        "‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
                        "‚Ä¢ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                        "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
                    )
            except (ValueError, IndexError):
                welcome_text = (
                    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                    "‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                    "‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
                    "‚Ä¢ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                    "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                    f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
                )
        else:
            welcome_text = (
                "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                "‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
                "‚Ä¢ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
            )
        
        db.add_user(user_id, username)
        
        db.add_bot_event("USER_START", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", user_id, "info")
        
        keyboard = get_user_keyboard(user_id)
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = message.from_user.id
        update_user_username(user_id, message.from_user.username)
        
        help_text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
            "‚Ä¢ /delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        )
        
        if admin_panel.is_admin(user_id):
            help_text += (
                "üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "‚Ä¢ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ /stop_bot - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                "‚Ä¢ /start_bot - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
            )
        
        help_text += (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            f"üÜî –í–∞—à ID: <tg-spoiler>{user_id}</tg-spoiler>"
        )
        
        keyboard = get_user_keyboard(user_id)
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("stop_bot"))
    async def cmd_stop_bot(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_bot"""
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
            return
        
        global bot_running
        bot_running = False
        stop_bot()
        
        await message.answer("‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode="HTML")
        db.add_bot_event("BOT_STOPPED", f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}", 
                        message.from_user.id, "warning")

    @dp.message(Command("start_bot"))
    async def cmd_start_bot(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_bot"""
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
            return
        
        global bot_running
        bot_running = True
        
        await message.answer("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
        db.add_bot_event("BOT_STARTED", f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}", 
                        message.from_user.id, "info")

    @dp.message(Command("users"))
    async def cmd_users(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users"""
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
            return
        
        update_user_username(message.from_user.id, message.from_user.username)
        
        total_users = db.get_total_users()
        active_users = db.get_active_users_count()
        new_users_today = db.get_new_users_today()
        
        users_text = (
            "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n"
            f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{new_users_today}</b>\n\n"
            f"üÜî –í–∞—à ID: <tg-spoiler>{message.from_user.id}</tg-spoiler>"
        )
        
        keyboard = get_admin_keyboard()
        await message.answer(users_text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("admin"))
    async def cmd_admin_help(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
            return
        
        update_user_username(message.from_user.id, message.from_user.username)
        await state.set_state(AdminPanelStates.in_admin_panel)
        
        admin_text = get_admin_panel_text(message.from_user.id)
        keyboard = get_admin_panel_keyboard()
        await message.answer(admin_text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("add"))
    async def cmd_add_note(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
        if not await check_bot_status(message):
            return
        await add_note_handler(message, state)

    @dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    async def add_note_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not await check_bot_status(message):
            return
        
        await state.set_state(NoteStates.waiting_for_note_text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )

    @dp.message(NoteStates.waiting_for_note_text)
    async def process_note_text(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            return
        
        if not message.text or not message.text.strip():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
            return
        
        if len(message.text) > 4000:
            await message.answer(
                "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 4000 —Å–∏–º–≤–æ–ª–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
            )
            return
        
        success, result_message = db.add_note(message.from_user.id, message.text.strip())
        
        if success:
            db.add_bot_event("NOTE_ADDED", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ (ID: {message.from_user.id})", 
                            message.from_user.id, "info")
        else:
            db.add_bot_event("NOTE_ADD_FAILED", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {result_message}", 
                            message.from_user.id, "error")
        
        await message.answer(result_message, reply_markup=get_user_keyboard(message.from_user.id))
        await state.clear()

    @dp.message(Command("list"))
    async def cmd_list_notes(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        if not await check_bot_status(message):
            return
        await list_notes_handler(message)

    @dp.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
    async def list_notes_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not await check_bot_status(message):
            return
        
        notes = db.get_user_notes(message.from_user.id)
        
        if not notes:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            return
        
        for i in range(0, len(notes), MAX_NOTES_PER_MESSAGE):
            batch = notes[i:i + MAX_NOTES_PER_MESSAGE]
            notes_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
            
            for j, (note_id, note_text) in enumerate(batch, start=i+1):
                notes_text += f"{j}. {note_text}\n"
            
            await message.answer(notes_text, reply_markup=get_user_keyboard(message.from_user.id))

    @dp.message(Command("delete"))
    async def cmd_delete_note(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        if not await check_bot_status(message):
            return
        await delete_note_handler(message, state)

    @dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    async def delete_note_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not await check_bot_status(message):
            return
        
        notes = db.get_user_notes(message.from_user.id)
        
        if not notes:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            return
        
        await state.update_data(notes=notes)
        await state.set_state(NoteStates.waiting_for_delete_number)
        
        notes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, (note_id, note_text) in enumerate(notes, start=1):
            notes_text += f"{i}. {note_text}\n"
        
        await message.answer(
            notes_text,
            reply_markup=get_cancel_keyboard()
        )

    @dp.message(NoteStates.waiting_for_delete_number)
    async def process_delete_number(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            return
        
        try:
            note_number = int(message.text)
            if note_number < 1:
                raise ValueError("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:")
            return
        
        data = await state.get_data()
        notes = data.get('notes', [])
        
        if note_number > len(notes):
            await message.answer("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        note_id = notes[note_number - 1][0]
        
        success, result_message = db.delete_note(message.from_user.id, note_id)
        
        if success:
            db.add_bot_event("NOTE_DELETED", f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ {note_id} (ID: {message.from_user.id})", 
                            message.from_user.id, "info")
        else:
            db.add_bot_event("NOTE_DELETE_FAILED", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {result_message}", 
                            message.from_user.id, "error")
        
        await message.answer(result_message, reply_markup=get_user_keyboard(message.from_user.id))
        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    @dp.message(F.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        
        await state.set_state(AdminPanelStates.in_admin_panel)
        
        admin_help = get_admin_panel_text(message.from_user.id)
        is_main_admin = admin_panel.is_main_admin(message.from_user.id)
        inline_keyboard = get_admin_panel_inline_keyboard(is_main_admin)
        
        await message.answer(admin_help, reply_markup=inline_keyboard, parse_mode="HTML")

    @dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    async def back_to_menu_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        
        await state.clear()
        
        await message.answer(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_user_keyboard(message.from_user.id)
        )

    @dp.message(F.text == "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    async def stop_bot_button_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        update_user_username(message.from_user.id, message.from_user.username)
        success, result = admin_panel.stop_bot(message.from_user.id)
        
        if success:
            db.add_bot_event("BOT_STOP_BUTTON", f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.username or message.from_user.id}", 
                            message.from_user.id, "warning")
        else:
            db.add_bot_event("BOT_STOP_BUTTON_FAILED", f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–µ—É–¥–∞—á–Ω–∞: {result}", 
                            message.from_user.id, "error")
        
        await message.answer(result, reply_markup=get_user_keyboard(message.from_user.id))

    @dp.message(F.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    async def start_bot_button_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        update_user_username(message.from_user.id, message.from_user.username)
        success, result = admin_panel.start_bot(message.from_user.id)
        
        if success:
            db.add_bot_event("BOT_START_BUTTON", f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.username or message.from_user.id}", 
                            message.from_user.id, "info")
        else:
            db.add_bot_event("BOT_START_BUTTON_FAILED", f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–µ—É–¥–∞—á–Ω–∞: {result}", 
                            message.from_user.id, "error")
        
        await message.answer(result, reply_markup=get_user_keyboard(message.from_user.id))

    @dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    async def users_list_button_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not admin_panel.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        
        success, result, users_data = admin_panel.get_users_list_paginated(message.from_user.id, page=1)
        
        if not success:
            await message.answer(result, reply_markup=get_admin_panel_keyboard())
            return
        
        if not users_data:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_admin_panel_keyboard())
            return
        
        users_text = f"üìä {result}\n\n"
        
        for i, (user_id, notes_count, role, total_referrals, active_referrals) in enumerate(users_data['users'], 1):
            display_name = get_user_display_name(user_id)
            
            if role == "main_admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üëë (Boss)\n"
            elif role == "admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} ‚≠ê (Admin)\n"
            else:
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üë§ (User)\n"
        
        keyboard = get_users_list_keyboard(
            users_data['page'], 
            users_data['total_pages'], 
            users_data['has_prev'], 
            users_data['has_next']
        )
        
        await message.answer(users_text, reply_markup=keyboard, parse_mode="Markdown")

    @dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    async def referral_system_handler(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not await check_bot_status(message):
            return
        
        await state.set_state(ReferralStates.in_referral_menu)
        
        total_referrals, active_referrals = db.get_referral_stats(message.from_user.id)
        referrer_info = db.get_referrer_info(message.from_user.id)
        
        referral_text = (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n\n"
            f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{total_referrals}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{active_referrals}</b>\n"
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{round(active_referrals/total_referrals*100, 1) if total_referrals > 0 else 0}%</b>\n"
        )
        
        if referrer_info:
            referrer_id, referrer_username = referrer_info
            referral_text += f"\nüéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: <b>@{referrer_username}</b>\n"
        
        referral_text += (
            "\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(referral_text, reply_markup=get_referral_keyboard(), parse_mode="HTML")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message()
    async def handle_unknown_message(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        if not await check_bot_status(message):
            return
        
        await cmd_help(message)

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    @dp.callback_query(F.data == "admin_stop_bot")
    async def admin_stop_bot_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        success, result = admin_panel.stop_bot(callback.from_user.id)
        
        if success:
            db.add_bot_event("BOT_STOP_CALLBACK", f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}", 
                            callback.from_user.id, "warning")
        else:
            db.add_bot_event("BOT_STOP_CALLBACK_FAILED", f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ—É–¥–∞—á–Ω–∞: {result}", 
                            callback.from_user.id, "error")
        
        await callback.answer(result, show_alert=True)
        await callback.message.edit_text(get_admin_panel_text(callback.from_user.id), reply_markup=get_admin_panel_inline_keyboard(), parse_mode="HTML")

    @dp.callback_query(F.data == "admin_start_bot")
    async def admin_start_bot_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        success, result = admin_panel.start_bot(callback.from_user.id)
        
        if success:
            db.add_bot_event("BOT_START_CALLBACK", f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}", 
                            callback.from_user.id, "info")
        else:
            db.add_bot_event("BOT_START_CALLBACK_FAILED", f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ—É–¥–∞—á–Ω–∞: {result}", 
                            callback.from_user.id, "error")
        
        await callback.answer(result, show_alert=True)
        await callback.message.edit_text(get_admin_panel_text(callback.from_user.id), reply_markup=get_admin_panel_inline_keyboard(), parse_mode="HTML")

    @dp.callback_query(F.data == "admin_users_list")
    async def admin_users_list_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        success, result, users_data = admin_panel.get_users_list_paginated(callback.from_user.id, page=1)
        
        if not success:
            await callback.answer(result, show_alert=True)
            return
        
        if not users_data:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        users_text = f"üìä {result}\n\n"
        
        for i, (user_id, notes_count, role, total_referrals, active_referrals) in enumerate(users_data['users'], 1):
            display_name = get_user_display_name(user_id)
            
            if role == "main_admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üëë (Boss)\n"
            elif role == "admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} ‚≠ê (Admin)\n"
            else:
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üë§ (User)\n"
        
        keyboard = get_users_list_keyboard(
            users_data['page'], 
            users_data['total_pages'], 
            users_data['has_prev'], 
            users_data['has_next']
        )
        
        await callback.message.edit_text(users_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()

    @dp.callback_query(F.data.startswith("users_page_"))
    async def users_page_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            page = int(callback.data.split("_")[-1])
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
            return
        
        success, result, users_data = admin_panel.get_users_list_paginated(callback.from_user.id, page=page)
        
        if not success:
            await callback.answer(result, show_alert=True)
            return
        
        if not users_data:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        users_text = f"üìä {result}\n\n"
        
        for i, (user_id, notes_count, role, total_referrals, active_referrals) in enumerate(users_data['users'], 1):
            display_name = get_user_display_name(user_id)
            
            if role == "main_admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üëë (Boss)\n"
            elif role == "admin":
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} ‚≠ê (Admin)\n"
            else:
                users_text += f"{i}. {display_name} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals} üë§ (User)\n"
        
        keyboard = get_users_list_keyboard(
            users_data['page'], 
            users_data['total_pages'], 
            users_data['has_prev'], 
            users_data['has_next']
        )
        
        await callback.message.edit_text(users_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()

    @dp.callback_query(F.data == "users_info")
    async def users_info_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)

    @dp.callback_query(F.data == "admin_manage_roles")
    async def admin_manage_roles_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        roles_text = (
            "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ ‚ûï –í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ ‚ûñ –°–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ - —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"
        )
        
        await callback.message.edit_text(roles_text, reply_markup=get_role_management_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "admin_admins_list")
    async def admin_admins_list_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        success, result, admins_list = admin_panel.get_admins_list(callback.from_user.id)
        
        if not success:
            await callback.answer(result, show_alert=True)
            return
        
        if not admins_list:
            await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        admins_text = f"üëë <b>{result}</b>\n\n"
        for i, (admin_id, role_type) in enumerate(admins_list, 1):
            safe_id = html.escape(str(admin_id))
            admins_text += f"{i}. ID: <tg-spoiler>{safe_id}</tg-spoiler> | {role_type}\n"
        if admin_panel.is_main_admin(callback.from_user.id):
            keyboard = get_admins_list_keyboard()
        else:
            keyboard = get_admin_panel_inline_keyboard(False)
        await callback.message.edit_text(admins_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "admin_referral_stats")
    async def admin_referral_stats_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        top_referrers = db.get_top_referrers(5)
        
        if not top_referrers:
            stats_text = "üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."
        else:
            stats_text = "üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            stats_text += "üèÜ <b>–¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
            for i, (user_id, total, active) in enumerate(top_referrers, 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                stats_text += f"{medal} ID: {user_id} | {total} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ({active} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
            
            total_referrals = sum(total for _, total, _ in top_referrers)
            total_active = sum(active for _, _, active in top_referrers)
            stats_text += f"\nüìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            stats_text += f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
            stats_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_active}\n"
            stats_text += f"üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {round(total_active/total_referrals*100, 1) if total_referrals > 0 else 0}%"
        
        await callback.message.edit_text(stats_text, reply_markup=get_admin_panel_inline_keyboard(admin_panel.is_main_admin(callback.from_user.id)), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "admin_debug_menu")
    async def admin_debug_menu_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–î–µ–±–∞–≥'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        debug_text = (
            "üîß <b>–î–µ–±–∞–≥ –º–µ–Ω—é:</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏:\n"
            "‚Ä¢ üîç –û—Ç–ª–∞–¥–∫–∞ username - –ø—Ä–æ—Å–º–æ—Ç—Ä username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ üìä –û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n"
            "‚Ä¢ üë• –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å username - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(debug_text, reply_markup=get_debug_menu_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "debug_usernames")
    async def debug_usernames_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ª–∞–¥–∫–∞ username'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        debug_info = db.get_debug_usernames_info()
        
        if not debug_info:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        debug_text = "üîç <b>–û—Ç–ª–∞–¥–∫–∞ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        
        debug_text += f"üìã <b>–¢–∞–±–ª–∏—Ü–∞ user_usernames ({len(debug_info['usernames'])} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        for user_id, username in debug_info['usernames']:
            debug_text += f"ID: {user_id} ‚Üí @{username}\n"
        
        debug_text += f"\nüìã <b>–¢–∞–±–ª–∏—Ü–∞ referrals ({len(debug_info['referrals'])} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        for referrer_id, referred_id, referrer_username in debug_info['referrals']:
            debug_text += f"–†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id} ‚Üí @{referrer_username} | –†–µ—Ñ–µ—Ä–∞–ª: {referred_id}\n"
        
        debug_text += f"\nüìã <b>–¢–∞–±–ª–∏—Ü–∞ user_roles ({len(debug_info['users'])} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        for user_id, role in debug_info['users']:
            debug_text += f"ID: {user_id} ‚Üí –†–æ–ª—å: {role}\n"
        
        await callback.message.edit_text(debug_text, reply_markup=get_debug_function_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "debug_update_usernames")
    async def debug_update_usernames_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å username'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username...", show_alert=True)
        
        success = db.update_all_usernames_from_referrals()
        
        if success:
            db.add_bot_event("DEBUG_UPDATE_USERNAMES", f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}", 
                            callback.from_user.id, "info")
        else:
            db.add_bot_event("DEBUG_UPDATE_USERNAMES_FAILED", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}", 
                            callback.from_user.id, "error")
        
        if success:
            await callback.message.edit_text(
                "‚úÖ Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–±–∞–≥ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=get_debug_function_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username.\n\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–±–∞–≥ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=get_debug_function_keyboard(),
                parse_mode="HTML"
            )

    @dp.callback_query(F.data == "debug_fix_referrals")
    async def debug_fix_referrals_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...", show_alert=True)
        
        fixed_count = db.fix_referral_usernames()
        
        db.add_bot_event("DEBUG_FIX_REFERRALS", f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}", 
                        callback.from_user.id, "info")
        
        await callback.message.edit_text(
            f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} username –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ!\n\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–±–∞–≥ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=get_debug_function_keyboard(),
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "debug_referrals")
    async def debug_referrals_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        debug_info = db.get_referrals_debug_info()
        
        if not debug_info:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        debug_text = "üìä <b>–û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n\n"
        
        debug_text += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        debug_text += f"–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: {debug_info['total_referrals']}\n"
        debug_text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: {debug_info['unique_referrers']}\n"
        debug_text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {debug_info['unique_referred']}\n\n"
        
        debug_text += f"üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ({len(debug_info['referrals'])} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        for referrer_id, referred_id, referrer_username, joined_at in debug_info['referrals']:
            referrer_display = get_user_display_name_html(referrer_id)
            referred_display = get_user_display_name_html(referred_id)
            debug_text += f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_display} ‚Üí –†–µ—Ñ–µ—Ä–∞–ª: {referred_display} | {joined_at}\n"
        
        await callback.message.edit_text(debug_text, reply_markup=get_debug_function_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "debug_users")
    async def debug_users_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        debug_info = db.get_users_debug_info()
        
        if not debug_info:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        debug_text = "üë• <b>–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        debug_text += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        debug_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {debug_info['total_users']}\n"
        debug_text += f"–ê–¥–º–∏–Ω–æ–≤: {debug_info['admin_users']}\n"
        debug_text += f"Boss: {debug_info['boss_users']}\n"
        debug_text += f"–û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {debug_info['regular_users']}\n\n"
        
        debug_text += f"üîç <b>–í—Å–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n"
        for role in debug_info['all_roles']:
            display_role = get_role_display_name(role)
            debug_text += f"‚Ä¢ {display_role}\n"
        debug_text += "\n"
        
        debug_text += f"üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ({len(debug_info['users'])} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        for user_id, role, granted_at, username, referrer_id, referrer_username, referred_id in debug_info['users']:
            display_name = get_user_display_name_html(user_id)
            
            referrer_info = ""
            if referrer_id:
                referrer_display = get_user_display_name_html(referrer_id)
                referrer_info = f" | –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_display}"
            
            referral_info = ""
            if referred_id:
                referral_info = " | –ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã"
            
            display_role = get_role_display_name(role)
            
            debug_text += f"‚Ä¢ {display_name} ‚Üí –†–æ–ª—å: {display_role} | {granted_at}{referrer_info}{referral_info}\n"
        
        await callback.message.edit_text(debug_text, reply_markup=get_debug_users_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "debug_events")
    async def debug_events_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–æ–±—ã—Ç–∏—è'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        stats = db.get_events_stats()
        recent_events = db.get_recent_events(10)
        
        debug_text = "üìã <b>–°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞:</b>\n\n"
        
        debug_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        debug_text += f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total_events', 0)}\n"
        debug_text += f"–ó–∞ 24 —á–∞—Å–∞: {stats.get('events_24h', 0)}\n\n"
        
        if stats.get('events_by_type'):
            debug_text += f"üìà <b>–°–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º:</b>\n"
            for event_type, count in stats['events_by_type']:
                debug_text += f"‚Ä¢ {event_type}: {count}\n"
            debug_text += "\n"
        
        if stats.get('events_by_severity'):
            debug_text += f"‚ö†Ô∏è <b>–°–æ–±—ã—Ç–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n"
            for severity, count in stats['events_by_severity']:
                severity_display = {
                    'info': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    'warning': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
                    'error': '‚ùå –û—à–∏–±–∫–∞',
                    'critical': 'üö® –ö—Ä–∏—Ç–∏—á–Ω–æ'
                }.get(severity, f"‚ùì {severity}")
                debug_text += f"‚Ä¢ {severity_display}: {count}\n"
            debug_text += "\n"
        
        debug_text += f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ({len(recent_events)}):</b>\n"
        for event_data in recent_events:
            event_type, event_description, user_id, severity, created_at, username = event_data
            
            display_username = "–°–∏—Å—Ç–µ–º–∞"
            if user_id:
                display_username = username or f"user{user_id}"
            
            severity_icon = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'critical': 'üö®'
            }.get(severity, '‚ùì')
            
            time_str = created_at.split(' ')[1][:5] if ' ' in created_at else created_at[:5]
            
            debug_text += f"{severity_icon} <b>{event_type}</b> | {display_username} | {time_str}\n"
            debug_text += f"   {event_description}\n\n"
        
        await callback.message.edit_text(debug_text, reply_markup=get_debug_events_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "debug_download_events")
    async def debug_download_events_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ–±—ã—Ç–∏–π...", show_alert=True)
        
        try:
            import pandas as pd
            import io
            from datetime import datetime
            
            data = db.get_events_excel_data()
            
            if not data:
                await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
                return
            
            df = pd.DataFrame(data)
            
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–°–æ–±—ã—Ç–∏—è', index=False)
                
                worksheet = writer.sheets['–°–æ–±—ã—Ç–∏—è']
                
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
            
            filename = f"bot_events_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            db.add_bot_event("DEBUG_DOWNLOAD_EVENTS", f"–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(data)} —Å–æ–±—ã—Ç–∏–π", 
                            callback.from_user.id, "info")
            
            await callback.message.answer_document(
                types.BufferedInputFile(
                    output.getvalue(),
                    filename=filename
                ),
                caption=f"üìã <b>–°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞</b>\n\n"
                       f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                       f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(data)}\n\n"
                       f"üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b>\n"
                       f"‚Ä¢ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è\n"
                       f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
                       f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                       f"‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å\n"
                       f"‚Ä¢ –î–∞—Ç–∞\n\n"
                       f"üìÅ –§–æ—Ä–º–∞—Ç: Excel (.xlsx)",
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ –§–∞–π–ª —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
            
        except Exception as e:
            db.add_bot_event("DEBUG_DOWNLOAD_EVENTS_FAILED", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}: {e}", 
                            callback.from_user.id, "error")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", show_alert=True)
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}\n\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–±–∞–≥ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=get_debug_events_keyboard(),
                parse_mode="HTML"
            )

    @dp.callback_query(F.data == "debug_download_users")
    async def debug_download_users_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", show_alert=True)
        
        try:
            import pandas as pd
            import io
            from datetime import datetime
            
            data = db.get_users_excel_data()
            
            if not data:
                await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
                return
            
            df = pd.DataFrame(data)
            
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
                
                worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']
                
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
            
            filename = f"users_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            db.add_bot_event("DEBUG_DOWNLOAD_USERS", f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                            callback.from_user.id, "info")
            
            await callback.message.answer_document(
                types.BufferedInputFile(
                    output.getvalue(),
                    filename=filename
                ),
                caption=f"üìä <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                       f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                       f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}\n\n"
                       f"üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b>\n"
                       f"‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                       f"‚Ä¢ Username\n"
                       f"‚Ä¢ –†–æ–ª—å\n"
                       f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä ID\n"
                       f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä Username\n"
                       f"‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                       f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                       f"‚Ä¢ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                       f"üìÅ –§–æ—Ä–º–∞—Ç: Excel (.xlsx)",
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
            
        except Exception as e:
            db.add_bot_event("DEBUG_DOWNLOAD_USERS_FAILED", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.username or callback.from_user.id}: {e}", 
                            callback.from_user.id, "error")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", show_alert=True)
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}\n\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–±–∞–≥ –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=get_debug_users_keyboard(),
                parse_mode="HTML"
            )

    @dp.callback_query(F.data == "admin_grant_role")
    async def admin_grant_role_callback(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(AdminPanelStates.waiting_for_grant_user_id)
        await callback.message.edit_text(
            "‚ûï <b>–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            parse_mode="HTML"
        )
        await callback.answer()

    @dp.callback_query(F.data == "admin_revoke_role")
    async def admin_revoke_role_callback(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_main_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(AdminPanelStates.waiting_for_revoke_user_id)
        await callback.message.edit_text(
            "‚ûñ <b>–°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            parse_mode="HTML"
        )
        await callback.answer()

    @dp.callback_query(F.data == "admin_panel_back")
    async def admin_panel_back_callback(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        if not admin_panel.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.clear()
        
        admin_help = get_admin_panel_text(callback.from_user.id)
        is_main_admin = admin_panel.is_main_admin(callback.from_user.id)
        inline_keyboard = get_admin_panel_inline_keyboard(is_main_admin)
        
        await callback.message.edit_text(admin_help, reply_markup=inline_keyboard, parse_mode="HTML")
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @dp.message(AdminPanelStates.waiting_for_grant_user_id)
    async def process_grant_user_id(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not admin_panel.is_main_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            await state.clear()
            return
        
        try:
            target_user_id = int(message.text)
            if target_user_id <= 0:
                raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")
            return
        
        success, result = admin_panel.grant_admin_role(target_user_id, message.from_user.id)
        
        if success:
            db.add_bot_event("ROLE_GRANTED", f"–†–æ–ª—å –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}", 
                            message.from_user.id, "info")
        else:
            db.add_bot_event("ROLE_GRANT_FAILED", f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏: {result}", 
                            message.from_user.id, "error")
        
        if success:
            await message.answer(f"‚úÖ {result}", reply_markup=get_user_keyboard(message.from_user.id))
        else:
            await message.answer(f"‚ùå {result}", reply_markup=get_user_keyboard(message.from_user.id))
        
        await state.clear()

    @dp.message(AdminPanelStates.waiting_for_revoke_user_id)
    async def process_revoke_user_id(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏"""
        update_user_username(message.from_user.id, message.from_user.username)
        if not admin_panel.is_main_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            await state.clear()
            return
        
        try:
            target_user_id = int(message.text)
            if target_user_id <= 0:
                raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")
            return
        
        success, result = admin_panel.revoke_admin_role(target_user_id, message.from_user.id)
        
        if success:
            db.add_bot_event("ROLE_REVOKED", f"–†–æ–ª—å –∞–¥–º–∏–Ω–∞ —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}", 
                            message.from_user.id, "warning")
        else:
            db.add_bot_event("ROLE_REVOKE_FAILED", f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏: {result}", 
                            message.from_user.id, "error")
        
        if success:
            await message.answer(f"‚úÖ {result}", reply_markup=get_user_keyboard(message.from_user.id))
        else:
            await message.answer(f"‚ùå {result}", reply_markup=get_user_keyboard(message.from_user.id))
        
        await state.clear()

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    @dp.callback_query(F.data == "referral_top")
    async def referral_top_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        top_referrers = db.get_top_referrers(10)
        
        if not top_referrers:
            top_text = "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞—Ö."
        else:
            top_text = "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n\n"
            for i, (user_id, total, active) in enumerate(top_referrers, 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                display_name = get_user_display_name_html(user_id)
                
                top_text += f"{medal} {display_name} | {total} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ({active} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
        
        await callback.message.edit_text(top_text, reply_markup=get_referral_back_keyboard(), parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "referral_share")
    async def referral_share_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        bot_username = (await bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref{callback.from_user.id}"
        
        share_text = (
            "üì§ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
            f"{referral_link}\n\n"
            "üìã <b>–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:</b>\n"
            "1. –°—Å—ã–ª–∫–∞ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! üìã\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É –≤ –ª—é–±–æ–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä\n"
            "3. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n"
            "üéâ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</b>"
        )
        
        await callback.message.edit_text(share_text, reply_markup=get_referral_back_keyboard(), parse_mode="HTML")
        await callback.answer(f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {referral_link}", show_alert=True)

    @dp.callback_query(F.data == "referral_back")
    async def referral_back_callback(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        update_user_username(callback.from_user.id, callback.from_user.username)
        total_referrals, active_referrals = db.get_referral_stats(callback.from_user.id)
        referrer_info = db.get_referrer_info(callback.from_user.id)
        
        referral_text = (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n\n"
            f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{total_referrals}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{active_referrals}</b>\n"
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{round(active_referrals/total_referrals*100, 1) if total_referrals > 0 else 0}%</b>\n"
        )
        
        if referrer_info:
            referrer_id, referrer_username = referrer_info
            referral_text += f"\nüéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: <b>@{referrer_username}</b>\n"
        
        referral_text += (
            "\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(referral_text, reply_markup=get_referral_keyboard(), parse_mode="HTML")
        await callback.answer()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_running, stop_event
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫...")
    print(f"üîß –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω ID: {admin_panel.get_admin_id()}")
    
    stop_event = asyncio.Event()
    
    bot_running = True
    
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    register_handlers(dp)
    
    try:
        polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
        
        stop_task = asyncio.create_task(stop_event.wait())
        
        done, pending = await asyncio.wait([polling_task, stop_task], return_when=asyncio.FIRST_COMPLETED)
        
        for task in pending:
            task.cancel()
        
        if stop_event.is_set():
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...")
            try:
                await polling_task
            except asyncio.CancelledError:
                pass
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ main(): {e}")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())