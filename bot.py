"""
Telegram-–±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
Copyright (c) 2025 HeelBoy666
Licensed under MIT License (see LICENSE file)

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
"""

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup

from config import BOT_TOKEN, MAX_NOTES_PER_MESSAGE
from database import Database
from keyboards import (
    get_main_keyboard, get_admin_keyboard, get_admin_panel_keyboard, 
    get_admin_panel_inline_keyboard, get_role_management_keyboard, 
    get_users_list_keyboard, get_cancel_keyboard
)
from admin import AdminPanel

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class NoteStates(StatesGroup):
    waiting_for_note_text = State()
    waiting_for_delete_number = State()

class AdminPanelStates(StatesGroup):
    in_admin_panel = State()
    waiting_for_grant_user_id = State()
    waiting_for_revoke_user_id = State()

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
db = Database()
admin_panel = AdminPanel()

# –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
async def check_bot_status(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    if admin_panel.is_bot_stopped() and not admin_panel.is_admin(message.from_user.id):
        await message.answer("ü§ñ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False
    return True

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_user_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if admin_panel.is_admin(user_id):
        return get_admin_keyboard()
    else:
        return get_main_keyboard()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. ü§ñ\n\n"
        "–ú–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –∏–¥–µ–∏, –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ —Ä–æ–ª–∏
    keyboard = get_user_keyboard(message.from_user.id)
    await message.answer(welcome_text, reply_markup=keyboard)

# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

@dp.message(Command("stop_bot"))
async def cmd_stop_bot(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    success, result = admin_panel.stop_bot(message.from_user.id)
    await message.answer(result, reply_markup=get_user_keyboard(message.from_user.id))

@dp.message(Command("start_bot"))
async def cmd_start_bot(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    success, result = admin_panel.start_bot(message.from_user.id)
    await message.answer(result, reply_markup=get_user_keyboard(message.from_user.id))

@dp.message(Command("users"))
async def cmd_users(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    success, result, users_data = admin_panel.get_users_list_paginated(message.from_user.id, page=1)
    
    if not success:
        await message.answer(result, reply_markup=get_user_keyboard(message.from_user.id))
        return
    
    if not users_data:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_user_keyboard(message.from_user.id))
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üìä {result}\n\n"
    
    for i, (user_id, notes_count, role) in enumerate(users_data['users'], 1):
        if role == "main_admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üëë (–ì–ª–∞–≤–Ω—ã–π)\n"
        elif role == "admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} ‚≠ê (–ê–¥–º–∏–Ω)\n"
        else:
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üë§\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_users_list_keyboard(
        users_data['page'], 
        users_data['total_pages'], 
        users_data['has_prev'], 
        users_data['has_next']
    )
    
    await message.answer(users_text, reply_markup=keyboard)

@dp.message(Command("admin"))
async def cmd_admin_help(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await state.set_state(AdminPanelStates.in_admin_panel)
    
    admin_help = (
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        f"üÜî –í–∞—à ID: {message.from_user.id}"
    )
    
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    is_main_admin = admin_panel.is_main_admin(message.from_user.id)
    inline_keyboard = get_admin_panel_inline_keyboard(is_main_admin)
    
    await message.answer(admin_help, reply_markup=inline_keyboard)

# –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´

@dp.message(Command("add"))
async def cmd_add_note(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    await add_note_handler(message, state)

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    await state.set_state(NoteStates.waiting_for_note_text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )

@dp.message(NoteStates.waiting_for_note_text)
async def process_note_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return
    
    # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
    if not message.text or not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
        return
    
    # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    if len(message.text) > 4000:
        await message.answer(
            "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 4000 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    success, result_message = db.add_note(message.from_user.id, message.text.strip())
    
    if success:
        await message.answer(
            f"‚úÖ {result_message}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            f"‚ùå {result_message}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    
    await state.clear()

@dp.message(Command("list"))
async def cmd_list_notes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    await list_notes_handler(message)

@dp.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
async def list_notes_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏'"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    notes = db.get_user_notes(message.from_user.id)
    
    if not notes:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return
    
    # –ì—Ä—É–ø–ø—ã –∑–∞–º–µ—Ç–æ–∫
    for i in range(0, len(notes), MAX_NOTES_PER_MESSAGE):
        batch = notes[i:i + MAX_NOTES_PER_MESSAGE]
        notes_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
        
        for j, (note_id, note_text) in enumerate(batch, start=i+1):
            notes_text += f"{j}. {note_text}\n"
        
        await message.answer(notes_text, reply_markup=get_user_keyboard(message.from_user.id))

@dp.message(Command("delete"))
async def cmd_delete_note(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    await delete_note_handler(message, state)

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def delete_note_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    notes = db.get_user_notes(message.from_user.id)
    
    if not notes:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(notes=notes)
    await state.set_state(NoteStates.waiting_for_delete_number)
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    notes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, (note_id, note_text) in enumerate(notes, start=1):
        notes_text += f"{i}. {note_text}\n"
    
    await message.answer(
        notes_text,
        reply_markup=get_cancel_keyboard()
    )

@dp.message(NoteStates.waiting_for_delete_number)
async def process_delete_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return
    
    try:
        note_number = int(message.text)
        if note_number < 1:
            raise ValueError("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:")
        return
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    notes = data.get('notes', [])
    
    if note_number > len(notes):
        await message.answer("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # ID –∑–∞–º–µ—Ç–∫–∏
    note_id = notes[note_number - 1][0]
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    success, result_message = db.delete_note(message.from_user.id, note_id)
    
    if success:
        await message.answer(
            f"‚úÖ {result_message}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            f"‚ùå {result_message}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    
    await state.clear()

# –ê–î–ú–ò–ù-–ö–ù–û–ü–ö–ò

@dp.message(F.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await state.set_state(AdminPanelStates.in_admin_panel)
    
    admin_help = (
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        f"üÜî –í–∞—à ID: {message.from_user.id}"
    )
    
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    is_main_admin = admin_panel.is_main_admin(message.from_user.id)
    inline_keyboard = get_admin_panel_inline_keyboard(is_main_admin)
    
    await message.answer(admin_help, reply_markup=inline_keyboard)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
async def back_to_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é'"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await state.clear()
    
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message(F.text == "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
async def stop_bot_button_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    success, result = admin_panel.stop_bot(message.from_user.id)
    await message.answer(result, reply_markup=get_admin_panel_keyboard())

@dp.message(F.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def start_bot_button_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    success, result = admin_panel.start_bot(message.from_user.id)
    await message.answer(result, reply_markup=get_admin_panel_keyboard())

@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def users_list_button_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    success, result, users_data = admin_panel.get_users_list_paginated(message.from_user.id, page=1)
    
    if not success:
        await message.answer(result, reply_markup=get_admin_panel_keyboard())
        return
    
    if not users_data:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_admin_panel_keyboard())
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üìä {result}\n\n"
    
    for i, (user_id, notes_count, role) in enumerate(users_data['users'], 1):
        if role == "main_admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üëë (–ì–ª–∞–≤–Ω—ã–π)\n"
        elif role == "admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} ‚≠ê (–ê–¥–º–∏–Ω)\n"
        else:
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üë§\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_users_list_keyboard(
        users_data['page'], 
        users_data['total_pages'], 
        users_data['has_prev'], 
        users_data['has_next']
    )
    
    await message.answer(users_text, reply_markup=keyboard)

# –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò

@dp.callback_query(F.data == "admin_stop_bot")
async def admin_stop_bot_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    success, result = admin_panel.stop_bot(callback.from_user.id)
    await callback.message.edit_text(f"‚è∏Ô∏è {result}")
    await callback.answer()

@dp.callback_query(F.data == "admin_start_bot")
async def admin_start_bot_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    success, result = admin_panel.start_bot(callback.from_user.id)
    await callback.message.edit_text(f"‚ñ∂Ô∏è {result}")
    await callback.answer()

@dp.callback_query(F.data == "admin_users_list")
async def admin_users_list_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    success, result, users_data = admin_panel.get_users_list_paginated(callback.from_user.id, page=1)
    
    if not success:
        await callback.answer(result, show_alert=True)
        return
    
    if not users_data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üìä {result}\n\n"
    
    for i, (user_id, notes_count, role) in enumerate(users_data['users'], 1):
        if role == "main_admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üëë (–ì–ª–∞–≤–Ω—ã–π)\n"
        elif role == "admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} ‚≠ê (–ê–¥–º–∏–Ω)\n"
        else:
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üë§\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_users_list_keyboard(
        users_data['page'], 
        users_data['total_pages'], 
        users_data['has_prev'], 
        users_data['has_next']
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(users_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("users_page_"))
async def users_page_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        return
    
    success, result, users_data = admin_panel.get_users_list_paginated(callback.from_user.id, page=page)
    
    if not success:
        await callback.answer(result, show_alert=True)
        return
    
    if not users_data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = f"üìä {result}\n\n"
    
    for i, (user_id, notes_count, role) in enumerate(users_data['users'], 1):
        if role == "main_admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üëë (–ì–ª–∞–≤–Ω—ã–π)\n"
        elif role == "admin":
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} ‚≠ê (–ê–¥–º–∏–Ω)\n"
        else:
            users_text += f"{i}. ID: {user_id} | –ó–∞–º–µ—Ç–æ–∫: {notes_count} üë§\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_users_list_keyboard(
        users_data['page'], 
        users_data['total_pages'], 
        users_data['has_prev'], 
        users_data['has_next']
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(users_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "users_info")
async def users_info_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)

@dp.callback_query(F.data == "admin_manage_roles")
async def admin_manage_roles_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏'"""
    if not admin_panel.is_main_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    roles_text = (
        "üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏:**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ ‚ûï –í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ ‚ûñ –°–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ - —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"
    )
    
    await callback.message.edit_text(roles_text, reply_markup=get_role_management_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "admin_admins_list")
async def admin_admins_list_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    success, result, admins_list = admin_panel.get_admins_list(callback.from_user.id)
    
    if not success:
        await callback.answer(result, show_alert=True)
        return
    
    if not admins_list:
        await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    admins_text = f"üëë **{result}**\n\n"
    for i, (admin_id, role_type) in enumerate(admins_list, 1):
        admins_text += f"{i}. ID: {admin_id} | {role_type}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if admin_panel.is_main_admin(callback.from_user.id):
        keyboard = get_role_management_keyboard()
    else:
        keyboard = get_admin_panel_inline_keyboard(False)
    
    await callback.message.edit_text(admins_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_grant_role")
async def admin_grant_role_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞'"""
    if not admin_panel.is_main_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(AdminPanelStates.waiting_for_grant_user_id)
    await callback.message.edit_text(
        "‚ûï **–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_revoke_role")
async def admin_revoke_role_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞'"""
    if not admin_panel.is_main_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(AdminPanelStates.waiting_for_revoke_user_id)
    await callback.message.edit_text(
        "‚ûñ **–°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_panel_back")
async def admin_panel_back_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'"""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.clear()
    
    admin_help = (
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        f"üÜî –í–∞—à ID: {callback.from_user.id}"
    )
    
    is_main_admin = admin_panel.is_main_admin(callback.from_user.id)
    inline_keyboard = get_admin_panel_inline_keyboard(is_main_admin)
    
    await callback.message.edit_text(admin_help, reply_markup=inline_keyboard)
    await callback.answer()

# –í–í–û–î ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

@dp.message(AdminPanelStates.waiting_for_grant_user_id)
async def process_grant_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏"""
    if not admin_panel.is_main_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text)
        if target_user_id <= 0:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")
        return
    
    success, result = admin_panel.grant_admin_role(target_user_id, message.from_user.id)
    
    if success:
        await message.answer(f"‚úÖ {result}", reply_markup=get_user_keyboard(message.from_user.id))
    else:
        await message.answer(f"‚ùå {result}", reply_markup=get_user_keyboard(message.from_user.id))
    
    await state.clear()

@dp.message(AdminPanelStates.waiting_for_revoke_user_id)
async def process_revoke_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏"""
    if not admin_panel.is_main_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text)
        if target_user_id <= 0:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")
        return
    
    success, result = admin_panel.revoke_admin_role(target_user_id, message.from_user.id)
    
    if success:
        await message.answer(f"‚úÖ {result}", reply_markup=get_user_keyboard(message.from_user.id))
    else:
        await message.answer(f"‚ùå {result}", reply_markup=get_user_keyboard(message.from_user.id))
    
    await state.clear()

@dp.message()
async def handle_unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    if not await check_bot_status(message):
        return
    
    # –ê–¥–º–∏–Ω-—Å–ø—Ä–∞–≤–∫–∞
    if admin_panel.is_admin(message.from_user.id):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n\n"
            "üîß –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/admin - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
            "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
            reply_markup=get_user_keyboard(message.from_user.id)
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫...")
    print(f"üîß –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω ID: {admin_panel.get_admin_id()}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 